{
    "title": "Аналог Mario",
    "description": "Будущее описание",
    "pathIcon": "1",
    "lessons": [
        {
            "title": "Запуск проекта",
            "description": [
                "\tЧтобы начать проходить тестовое задания, вам необходимо нажать на кнопку «Приступить к заданию». После чего откроется Unity Hub, где вам нужно нажать на кнопку «Open» и выбрать папку с проектом. Она находится в папке, которую вы выбирали при установке нашего приложения.",
                "<style=\"Sprite\"><sprite index=0></style>",
                "\tЕсли вы забыли путь к папке, вы можете посмотреть на странице «Мой профиль» и, при необходимости, изменить.",
                "<style=\"Sprite\"><sprite index=1></style>",
                "\tПосле того, как в списке проектов появится ваш проект с именем «Аналог Mario», нажмите на него и подождите, пока он откроется.",
                "<style=\"Sprite\"><sprite index=2></style>"
            ],
            "video": null
        },
        {
            "title": "Создание первого уровня",
            "description": [
                "\t<color=\"red\">ВНИМАНИЕ! Обратите внимание на названия компонентов и объектов при выполнении задания. Это будет проверятся при тестировании!</color>",
                "\tВ ходе данного урока вы сможете сделать платформу, по которой в будущем будет двигаться наш персонаж.",
                "\tДля начала необходимо открыть Unity, в окне с файлами проекта найти папку Assets, а уже в ней папку Sprites, в которой находятся необходимые для проекта спрайты. Если дважды нажмёте на спрайт с именем Tileset, то он откроется как картинка. Здесь вы можете увидеть сетку из разных спрайтов. Что же с ними необходимо сделать, что пользоваться в дальнейшем?",
                "\tЕсли просто переместить изображение на сцену, то вы не сможете взять отдельные элементы из неё.",
                "\tТак как Tileset пиксельный, он может размываться. Что бы избежать этого во вкладке Inspector в поле Filter Mode необходимо поставить значение “Point (no filter)”, а в Sprite Mode необходимо выбрать “Multiple” (так Unity поймёт, что у нас есть целая сетка спрайтов, а не один) и нажать на кнопку Apply ниже. Далее, при нажатии на кнопку Sprite Editor, открываете редактор спрайтов.",
                "<style=\"Sprite\"><sprite index=0></style>",
                "\tВ левом верхнем углу появившегося окна нажмите на Slice. В открывшемся окошке необходимо поменять Type на “Grid By Cell Size”, указать размеры (в Марио используется 16х16) и нажать на кнопку Slice. Если ничего не менять, а сразу нажать на кнопку, Unity выделит всю картинку как один большой спрайт, но нам это не нужно.",
                "<style=\"Sprite\"><sprite index=1></style>",
                "\tВ самом низу изображения вы можете увидеть тучки, которые автоматически поделились на 6 частей. Исправим это. Нажимаете на каждый кубик и удаляете его кнопкой Delete. Теперь выделите каждую из них как отдельный объект: зажимаете ЛКМ и выделяете облака по их границам. Если выделение получилось неровным, то можете его исправить, потянув за уголок выделения. После того, как вы всё выделили, нажимайте на кнопку Apply и закрывайте Sprite Editor.",
                "<style=\"Sprite\"><sprite index=2></style>",
                "\tЧто бы увидеть на какие спрайты поделилось изображения, нажмите на стрелочку рядом с изображением. Но если вы перенесёте один из них на сцену, то увидите, что он слишком маленькие. Размеры спрайтов можно поменять в поле Scale, но тогда вам вручную придётся менять каждый раз каждый тайл. Лучше поменять значение поля “Pixels Per Unit” на 16. Это количество пикселей спрайта на 1 unit. А unit — это система измерения расстояния в Unity, как для нас метры.",
                "<style=\"Sprite\"><sprite index=3></style>",
                "\tТеперь распределим спрайты на сцене. Для этого во вкладке иерархии добавим Tilemap (нажать ПКМ -> 2D Object -> Tilemap -> Rectangular). На сцене появилась сетка.",
                "<style=\"Sprite\"><sprite index=4></style>",
                "\tТеперь вам нужно создать палетку спрайтов. Для этого наведите указатель мышки на Window, в открывшемся списке найдите пункт 2D, а внутри него выберите Tile Palette. И у вас должно появится окошко с соответствующей вкладкой. Вы можете перенести эту вкладку в любое место рядом с другой вкладкой, например, рядом с вкладкой Inspector.",
                "<style=\"Sprite\"><sprite index=5></style>",
                "\tДалее вам нужно создать новую палитру с помощью кнопки Create New Palette. Так как в данном курсе вам потребуется создать один уровень, назовите её Level. Создайте две папки с именами Palettes и Tiles внутри папки Sprites (она находится в папке Assets). Сохраните свою палитру в папке Palettes.",
                "\tТеперь перейдём к созданию тайлов. Возьмите самый первый спрайт и перенесите его в свою палитру, дайте ему название Gound и сохраните в папку Tiles. На вкладке Tile Palette выберите кисть и с помощью созданного тайла создайте землю, зажав ЛКМ на сцене и проведите линию.",
                "<style=\"Sprite\"><sprite index=6></style>",
                "\tДля того, чтобы создать куст, состоящий из трёх элементов, создайте новый Tilemap в том же Grid, перенесите на палитру все эти компоненты куста, назовите их следующим образом:",
                "  -  левую часть куста – LeftBush",
                "  -  центральную  часть – CenterBush",
                "  -  правую часть куста – RightBush",
                "\tВыделите все три элемента и перенесите на сцену.",
                "\tНаверное, вам интересно, зачем нам два Tilemap? Ответ на этот вопрос прост: один Tilemap для тайлов, по которым будет двигаться персонаж, а второй нужен для украшений, находящихся на карте, например, для кустиков.",
                "\tЕсли вам необходимо удалить тайл из палитры, выберите ластик и нажмите на ненужный элемент. После этого не забудьте удалить его из папки.",
                "<style=\"Sprite\"><sprite index=7></style>",
                "\tТак как при разделении вы меняли размеры спрайтов тучек, вы можете их просто перенести на сцену, не использую палитру. Как вы могли заметить, на вкладке иерархии появилось несколько элементов, связанных с облаками. Что бы не засорять дерево иерархии, объединим все тучки в один элемент. Для этого нажмите ПКМ на вкладке и выберите Create Empty, и назовите его Clouds.",
                "<style=\"Sprite\"><sprite index=8></style>",
                "\tТеперь поменяйте цвет фона на камере. Во вкладке иерархии найдите объект Main Camera, у него в компоненте Camera убедимся, что в поле Clear Flags установлено значение Solid Color. Ведь только так можно поменять цвет фона.",
                "<style=\"Sprite\"><sprite index=9></style>",
                "\tДальше выберете поле Background. В окне редактора цвета выберете RGB 0-255. Для красного канала укажите значение 99, для зелёного – 136, для синего – 251. Канал альфа оставьте по умолчанию.",
                "<style=\"Sprite\"><sprite index=10></style>",
                "\tЗадание:",
                "<style=\"Sprite\"><sprite index=11></style>",
                "\tСоздайте сцену по примеру выше. На сцене должны быть хотя бы 1 облако, 1 целый куст, 1 парящая платформа хотя бы с 1 бонусом и земля должна состоять минимум из 2 слоёв кубиков. При этом ваши тайлы должны иметь следующие названия:",
                "  -  земля – <b>Gound</b>",
                "  -  кирпичи – <b>Bricks</b>",
                "  -  бонусная ячейка – <b>BonusCell</b>",
                "  -  левую часть куста – <b>LeftBush</b>",
                "  -  центральную  часть – <b>CenterBush</b>",
                "  -  правую часть куста – <b>RightBush</b>",
                "  -  облако - <b>Cloud</b>"
            ],
            "video": null
        },
        {
            "title": "Персонаж и управление",
            "description": [
                "\t<color=\"red\">ВНИМАНИЕ! Обратите внимание на названия компонентов и объектов при выполнении задания. Это будет проверятся при тестировании!</color>",
                "\tВ ходе данного урока вы сможете создать персонажа и напишете первые строчки кода.",
                "\tКак в прошлом уроке разделите изображение Player на спрайты. (Подсказка: в окне Slice в поле Type необходимо установить значение Automatic).",
                "\tПосле того, как вы получили спрайты персонажа, перетащите любой из них на сцену. Дайте ему название Player и укажите ему соответствующий тег.",
                "<style=\"Sprite\"><sprite index=0></style>",
                "\tЕсли у вас в выпадающем списке нет такого тега, то вы его можете задать сами. Для этого внизу списка нажмите на кнопку Add Tag…, в открывшемся списке добавьте тег в любое свободное поле. Тег — это справочное слово, которое можно присвоить одному или нескольким GameObjects. Теги помогают идентифицировать игровые объекты для сценариев. Они гарантируют, что вам не нужно вручную добавлять игровые объекты к открытым свойствам скрипта с помощью перетаскивания, тем самым экономя время, когда вы используете один и тот же код скрипта в нескольких игровых объектах.",
                "<style=\"Sprite\"><sprite index=1></style>",
                "\tДальше вам нужно сделать так, чтобы ваш персонаж падал и не проваливался под землю. Для этого добавьте на персонажа Box Collider 2D и Rigidbody 2D (внизу на вкладке Inspector нажать на кнопку Add Component и в появившемся окошке написать названия необходимых компонентов).",
                "\tА на Tilemap, который отвечает за элементы, по которым передвигается персонаж, необходимо установить компонент Tilemap Collider 2D.",
                "<style=\"Sprite\"><sprite index=2></style>",
                "\tТеперь приступим к написанию кода. Создайте в папке Assets папку Scripts (нажмите ПКМ на папку Assets и выберите пункт Create, далее выберите Folder и напишите название). Зайдите в созданную папку и по аналогии с создание папки создайте скрипт (для этого вам нужно нажать на пункт C# Script). Дайте ему имя Player и откройте его.",
                "<style=\"Sprite\"><sprite index=3></style>",
                "\tВ открывшемся скрипте вы можете увидеть два метода, которые создаются автоматически: Start и Update.",
                "\tДобавьте новый метод FixedUpdate (этот метод вызывается по умолчанию раз в 50 ms).",
                "\tСоздайте переменную, в которую вы будете сохранять текущую позиция игрока:",
                "<style=\"Script\">Vector3 position = transform.postion;</style>",
                "  -  Vector3 представляет собой трехмерную координату;",
                "  -  transform используется для хранения значений позиции, вращения, размеров и состояния наследования GameObject’а.",
                "\tТак будет изменять позиция по оси X, когда вы нажимаете на кнопки A и D:",
                "<style=\"Script\">position.x += Input.GetAxis(“Horizontal”) * speed;</style>",
                "\tТеперь передайте измененную позицию своему персонажу:",
                "<style=\"Script\">transform.position = position;</style>",
                "\tТак же вам необходимо создать приватные поля, два из них имеют [SerializeField] (он позволяет отображать поля в инспекторе):",
                "<style=\"Script\">[SerializeField] private float speed;</style>",
                "<style=\"Script\">[SerializeField] private float jumpForce;</style>",
                "<style=\"Script\">private Rigidbody2D rigidbody2d;</style>",
                "\tВ методе Start (вызывается перед первым вызовом метода Update) вы должны задать полю rigidbody2d компонент Rigidbody 2D персонажа.",
                "<style=\"Script\">rigidbody2d = GetComponent<RigidBody2D>();</style>",
                "\tТак же создайте метод для прыжка:",
                "<style=\"Script\">private void Jump()</style>",
                "<style=\"Script\">    {</style>",
                "<style=\"Script\">        rigidbody2d.AddForce(transform.up * jumpForce, ForceMode2D.Impulse);</style>",
                "<style=\"Script\">    }</style>",
                "\tТеперь вы должны вызывать этот метод в Update при условии, что вы нажимаете на кнопку Space и нет никакой силы по оси X.",
                "<style=\"Script\">if (Input.GetKeyDown(KeyCode.Space) && rigidbody2d.velocity.y == 0)</style>",
                "<style=\"Script\">    {</style>",
                "<style=\"Script\">        Jump();</style>",
                "<style=\"Script\">    }</style>",
                "\tВ итоге, ваш скрипт должен выглядеть следующим образом:",
                "<style=\"Script\">public class Player : MonoBehaviour</style>",
                "<style=\"Script\">{</style>",
                "<style=\"Script\">    [SerializeField] private float speed;</style>",
                "<style=\"Script\">    [SerializeField] private float jumpForce;</style>",
                "<style=\"Script\">    private Rigidbody2D rigidbody2d;</style>",
                "<style=\"Script\"></style>",
                "<style=\"Script\">    private void Start()</style>",
                "<style=\"Script\">    {</style>",
                "<style=\"Script\">        rigidbody2d = GetComponent<Rigidbody2D>();</style>",
                "<style=\"Script\">    }</style>",
                "<style=\"Script\">    private void Update()</style>",
                "<style=\"Script\">    {</style>",
                "<style=\"Script\">        if (Input.GetKeyDown(KeyCode.Space) && rigidbody2d.velocity.y == 0)</style>",
                "<style=\"Script\">        {</style>",
                "<style=\"Script\">            Jump();</style>",
                "<style=\"Script\">        }</style>",
                "<style=\"Script\">    }</style>",
                "<style=\"Script\"></style>",
                "<style=\"Script\">    private void FixedUpdate()</style>",
                "<style=\"Script\">    {</style>",
                "<style=\"Script\">        Vector3 position = transform.position;</style>",
                "<style=\"Script\"></style>",
                "<style=\"Script\">        position.x += Input.GetAxis(\"Horizontal\") * speed;</style>",
                "<style=\"Script\"></style>",
                "<style=\"Script\">        transform.position = position;</style>",
                "<style=\"Script\">    }</style>",
                "<style=\"Script\"></style>",
                "<style=\"Script\">    private void Jump()</style>",
                "<style=\"Script\">    {</style>",
                "<style=\"Script\">        rigidbody2d.AddForce(transform.up * jumpForce, ForceMode2D.Impulse);</style>",
                "<style=\"Script\">    }</style>",
                "<style=\"Script\">}</style>"
            ],
            "video": null
        }
    ]
}